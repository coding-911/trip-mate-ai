"""Add tag/itinerary tables

Revision ID: c608e00a10f3
Revises: 646f4d681591
Create Date: 2025-04-26 23:19:32.848757

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c608e00a10f3'
down_revision: Union[str, None] = '646f4d681591'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('use_yn', sa.CHAR(length=1), nullable=True),
    sa.Column('delete_yn', sa.CHAR(length=1), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('itinerary_tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('itinerary_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.Column('use_yn', sa.CHAR(length=1), nullable=True),
    sa.Column('delete_yn', sa.CHAR(length=1), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['itinerary_id'], ['itineraries.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('itinerary_preferences')
    op.alter_column('itineraries', 'use_yn',
               existing_type=sa.CHAR(length=1),
               nullable=True,
               existing_server_default=sa.text("'Y'::bpchar"))
    op.alter_column('itineraries', 'delete_yn',
               existing_type=sa.CHAR(length=1),
               nullable=True,
               existing_server_default=sa.text("'N'::bpchar"))
    op.alter_column('itineraries', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('itineraries', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('itineraries', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.drop_constraint('itineraries_user_id_fkey', 'itineraries', type_='foreignkey')
    op.create_foreign_key(None, 'itineraries', 'users', ['user_id'], ['id'])
    op.add_column('itinerary_steps', sa.Column('start_time', sa.TIMESTAMP(), nullable=False))
    op.add_column('itinerary_steps', sa.Column('end_time', sa.TIMESTAMP(), nullable=False))
    op.alter_column('itinerary_steps', 'use_yn',
               existing_type=sa.CHAR(length=1),
               nullable=True,
               existing_server_default=sa.text("'Y'::bpchar"))
    op.alter_column('itinerary_steps', 'delete_yn',
               existing_type=sa.CHAR(length=1),
               nullable=True,
               existing_server_default=sa.text("'N'::bpchar"))
    op.alter_column('itinerary_steps', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('itinerary_steps', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('itinerary_steps', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.drop_constraint('itinerary_steps_itinerary_id_fkey', 'itinerary_steps', type_='foreignkey')
    op.drop_constraint('itinerary_steps_place_id_fkey', 'itinerary_steps', type_='foreignkey')
    op.create_foreign_key(None, 'itinerary_steps', 'itineraries', ['itinerary_id'], ['id'])
    op.create_foreign_key(None, 'itinerary_steps', 'locations', ['place_id'], ['id'])
    op.drop_column('itinerary_steps', 'time_slot')
    op.add_column('locations', sa.Column('tag_id', sa.UUID(), nullable=True))
    op.alter_column('locations', 'use_yn',
               existing_type=sa.CHAR(length=1),
               nullable=True,
               existing_server_default=sa.text("'Y'::bpchar"))
    op.alter_column('locations', 'delete_yn',
               existing_type=sa.CHAR(length=1),
               nullable=True,
               existing_server_default=sa.text("'N'::bpchar"))
    op.alter_column('locations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('locations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('locations', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.create_foreign_key(None, 'locations', 'tags', ['tag_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'locations', type_='foreignkey')
    op.alter_column('locations', 'deleted_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('locations', 'updated_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('locations', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('locations', 'delete_yn',
               existing_type=sa.CHAR(length=1),
               nullable=False,
               existing_server_default=sa.text("'N'::bpchar"))
    op.alter_column('locations', 'use_yn',
               existing_type=sa.CHAR(length=1),
               nullable=False,
               existing_server_default=sa.text("'Y'::bpchar"))
    op.drop_column('locations', 'tag_id')
    op.add_column('itinerary_steps', sa.Column('time_slot', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'itinerary_steps', type_='foreignkey')
    op.drop_constraint(None, 'itinerary_steps', type_='foreignkey')
    op.create_foreign_key('itinerary_steps_place_id_fkey', 'itinerary_steps', 'locations', ['place_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('itinerary_steps_itinerary_id_fkey', 'itinerary_steps', 'itineraries', ['itinerary_id'], ['id'], ondelete='CASCADE')
    op.alter_column('itinerary_steps', 'deleted_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('itinerary_steps', 'updated_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('itinerary_steps', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('itinerary_steps', 'delete_yn',
               existing_type=sa.CHAR(length=1),
               nullable=False,
               existing_server_default=sa.text("'N'::bpchar"))
    op.alter_column('itinerary_steps', 'use_yn',
               existing_type=sa.CHAR(length=1),
               nullable=False,
               existing_server_default=sa.text("'Y'::bpchar"))
    op.drop_column('itinerary_steps', 'end_time')
    op.drop_column('itinerary_steps', 'start_time')
    op.drop_constraint(None, 'itineraries', type_='foreignkey')
    op.create_foreign_key('itineraries_user_id_fkey', 'itineraries', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('itineraries', 'deleted_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('itineraries', 'updated_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('itineraries', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('itineraries', 'delete_yn',
               existing_type=sa.CHAR(length=1),
               nullable=False,
               existing_server_default=sa.text("'N'::bpchar"))
    op.alter_column('itineraries', 'use_yn',
               existing_type=sa.CHAR(length=1),
               nullable=False,
               existing_server_default=sa.text("'Y'::bpchar"))
    op.create_table('itinerary_preferences',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('itinerary_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('use_yn', sa.CHAR(length=1), server_default=sa.text("'Y'::bpchar"), autoincrement=False, nullable=False),
    sa.Column('delete_yn', sa.CHAR(length=1), server_default=sa.text("'N'::bpchar"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['itinerary_id'], ['itineraries.id'], name='itinerary_preferences_itinerary_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='itinerary_preferences_pkey')
    )
    op.drop_table('itinerary_tags')
    op.drop_table('tags')
    # ### end Alembic commands ###
